swagger: '2.0'
info:
  version: '0.1.0'
  title: User API
  description: Draft API to to test Swagger and Spring Boot
host: localhost:8080
basePath: /api
schemes:
  - http
parameters:
  userEmail:
    in: path
    name: userEmail
    type: string
    required: true
  token:
    in: header
    name: Authorization
    type: string
    required: true
paths:
  /users:
    parameters:
      - $ref: '#/parameters/token'
    get:
      description: get the list of all user
      operationId: getUsers
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/UserDTO'
        '401':
          description: unauthorized
        '403':
          description: forbidden
    post:
      description: create a user
      operationId: createUser
      consumes:
        - application/json
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: Created
        '401':
          description: unauthorized
        '403':
          description: Forbidden
        '409':
          description: Conflit
  /users/{userEmail}:
    parameters:
      - $ref: '#/parameters/userEmail'
      - $ref: '#/parameters/token'
    get:
      description: get user by id
      operationId: getUserById
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserDTO'
        '401':
          description: unauthorized
        '403':
          description: Forbiden
        '404':
          description: Not found
    delete:
      description: delete a user
      operationId: deleteUser
      consumes:
        - application/json
      responses:
        '204':
          description: Deleted
        '401':
          description: unauthorized
        '403':
          description: Forbiden
        '404':
          description: Not found
    patch:
      description: update a user
      operationId: updateUser
      consumes:
        - application/json
      parameters:
        - name: password
          in: body
          required: true
          schema:
            $ref: '#/definitions/Password'

      responses:
        '202':
          description: Updated
        '401':
          description: unauthorized
        '403':
          description: Forbiden
        '404':
          description: Not found
  /authentication:
    post:
      description: authenticate a user
      operationId: authentication
      consumes:
        - application/json
      parameters:
        - name: authDTO
          in: body
          required: true
          schema:
            $ref: '#/definitions/AuthDTO'
      responses:
        '200':
          description: authenticated
          schema:
            type: string
            items:
              $ref: '#/definitions/Token'
        '400':
          description: Bad request
        '401':
          description: unauthorized
        '404':
          description: not found
definitions:
  User:
    type: object
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/roles'
  UserDTO:
    type: object
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      role:
        $ref: '#/definitions/roles'
  AuthDTO:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  Token:
    type: object
    properties:
      token:
        type: string
  Password:
    type: object
    properties:
      password:
        type: string
  roles:
    type: string
    enum:
      - user
      - admin